@model PaginatedList<AdventureWorks.ViewModels.ProductCategoryVM>

@{
    ViewData["Title"] = "IndexProductCategory";
}

<h1>Product Categories</h1>

<form asp-action="IndexProductCategory" method="get">
    <div class="form-actions no-color">
        <p>
            <div class="form-group" style="display: inline-block">
                <span>Search on Product Name, Product Number or Category Name:</span>
                <input type="text" name="SearchString"
                       value="@ViewData["currentFilter"]" required />
            </div>
            <div class="form-group" style="display: inline-block">
                <input type="submit" value="Search"
                       class="btn btn-primary" />
            </div>
            <a asp-action="IndexProductCategory">Back to Full Category List</a>

        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.ActionLink("Product ID", "IndexProductCategory", new { sortOrder = ViewBag.IDSortParm })
            </th>
            <th>
                @Html.DisplayName("Product Name")
            </th>
            <th>
                @Html.ActionLink("Product Number", "IndexProductCategory", new { sortOrder = ViewBag.NumSortParm })
            </th>
            <th>
                @Html.DisplayName("Colour")
            </th>
            <th>
                @Html.ActionLink("Categroy Product Name", "IndexProductCategory", new { sortOrder = ViewBag.CateNameSortParm })
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ProductID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ProductName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ProductNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Color)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CategoryName)
            </td>
            <td>
             
            </td>
        </tr>
}
    </tbody>
</table>
<nav>
    <ul class="pagination">
        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
            <a class="page-link"
               href="@Url.Action("IndexProductCategory", new { pageNumber = Model.PageIndex - 1 })">
                Previous
            </a>
        </li>
        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
            <a class="page-link"
               href="@Url.Action("IndexProductCategory", new { pageNumber = Model.PageIndex + 1 })">
                Next
            </a>
        </li>

    </ul>
</nav>